import os
import json
from datetime import datetime
import argparse

# Define the transaction data structure
class Transaction:
    def __init__(self, category, amount, date):
        self.category = category
        self.amount = amount
        self.date = date

# Define the BudgetTracker class
class BudgetTracker:
    def __init__(self):
        self.income = 0
        self.expenses = []
        self.categories = set()

    def add_income(self, amount, date):
        self.income += amount
        self.expenses.append(Transaction("Income", amount, date))

    def add_expense(self, category, amount, date):
        self.expenses.append(Transaction(category, amount, date))
        self.categories.add(category)

    def calculate_budget(self):
        total_expenses = sum(transaction.amount for transaction in self.expenses)
        return self.income - total_expenses

    def analyze_expenses_by_category(self):
        category_expenses = {}
        for transaction in self.expenses:
            if transaction.category not in category_expenses:
                category_expenses[transaction.category] = 0
            category_expenses[transaction.category] += transaction.amount
        return category_expenses

    def get_transaction_history(self):
        return sorted(self.expenses, key=lambda t: t.date)

    def save_to_file(self, filename):
        data = {
            "income": self.income,
            "expenses": [(t.category, t.amount, t.date.strftime('%Y-%m-%d')) for t in self.expenses]
        }
        with open(filename, 'w') as f:
            json.dump(data, f)

    def load_from_file(self, filename):
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                data = json.load(f)
                self.income = data.get("income", 0)
                self.expenses = [Transaction(category, amount, datetime.strptime(date, '%Y-%m-%d')) for category, amount, date in data.get("expenses", [])]
                self.categories = set(transaction.category for transaction in self.expenses)

def main():
    parser = argparse.ArgumentParser(description="Console-based Budget Tracker Application")
    parser.add_argument("--datafile", default="budget_data.json", help="Specify the data file to use")
    args = parser.parse_args()

    budget_tracker = BudgetTracker()

    # Load data from file (if the file exists)
    budget_tracker.load_from_file(args.datafile)

    while True:
        print("\nBudget Tracker Menu:")
        print("1. Add Income")
        print("2. Add Expense")
        print("3. View Budget")
        print("4. Analyze Expenses")
        print("5. Transaction History")
        print("6. Save and Quit")

        choice = input("Enter your choice (1/2/3/4/5/6): ")

        if choice == "1":
            income = float(input("Enter income amount: "))
            date_str = input("Enter income date (YYYY-MM-DD): ")
            date = datetime.strptime(date_str, '%Y-%m-%d')
            budget_tracker.add_income(income, date)
            print("Income added successfully!")

        elif choice == "2":
            category = input("Enter expense category: ")
            amount = float(input("Enter expense amount: "))
            date_str = input("Enter expense date (YYYY-MM-DD): ")
            date = datetime.strptime(date_str, '%Y-%m-%d')
            budget_tracker.add_expense(category, amount, date)
            print("Expense added successfully!")

        elif choice == "3":
            budget = budget_tracker.calculate_budget()
            print(f"Remaining Budget: ${budget:.2f}")

        elif choice == "4":
            expense_by_category = budget_tracker.analyze_expenses_by_category()
            print("\nExpense Analysis by Category:")
            for category, amount in expense_by_category.items():
                print(f"{category}: ${amount:.2f}")

        elif choice == "5":
            transactions = budget_tracker.get_transaction_history()
            print("\nTransaction History:")
            for transaction in transactions:
                print(f"Date: {transaction.date.strftime('%Y-%m-%d')}, Category: {transaction.category}, Amount: ${transaction.amount:.2f}")

        elif choice == "6":
            budget_tracker.save_to_file(args.datafile)
            print("Budget data saved. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
